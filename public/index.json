[{"content":" Image Thresholding # Simple Thresholding # For the simple thresholding process, when the pixels smaller than the threshold, it will be set to the 0, otherwise it will be set to 1.\nThere are several types of simple thresholds\nThere are several parameters.\nsrc: The image source threshold: The threshold maxThreshold: The maximum threshold Type: the type of threshold ret,thresh1 = cv.threshold(img,127,255,cv.THRESH_BINARY) ","date":"1 July 2023","permalink":"/opencv/threshold/","section":"Opencvs","summary":"Image Thresholding # Simple Thresholding # For the simple thresholding process, when the pixels smaller than the threshold, it will be set to the 0, otherwise it will be set to 1.","title":"Image Thresholding process"},{"content":"","date":"1 July 2023","permalink":"/","section":"My star","summary":"","title":"My star"},{"content":"","date":"1 July 2023","permalink":"/opencv/","section":"Opencvs","summary":"","title":"Opencvs"},{"content":" Geometric Transformations of Images # 1. Transformations # cv.warpAffine and cv.warpPerspective are two functions used to transform the pictures.\nThe warpAffine can be used to rotate , translate and scale, transformed parallel lines are still parallel.\n1.1 scaling # using the cv.resize function to resize the image.\nwhen using the cv.resize function to resize the image, there are two ways.\nusing the fx and fy to scale the x and y using the shape parameter to set the x and y directly import numpy as np import cv2 as cv img = cv.imread(\u0026#39;messi5.jpg\u0026#39;) assert img is not None, \u0026#34;file could not be read, check with os.path.exists()\u0026#34; res = cv.resize(img,None,fx=2, fy=2, interpolation = cv.INTER_CUBIC) #OR height, width = img.shape[:2] res = cv.resize(img,(2*width, 2*height), interpolation = cv.INTER_CUBIC) 1.2 rotation # using cv.wrapAffine to rotate the image.\nimg = cv.imread(\u0026#39;messi5.jpg\u0026#39;, cv.IMREAD_GRAYSCALE) assert img is not None, \u0026#34;file could not be read, check with os.path.exists()\u0026#34; rows,cols = img.shape # cols-1 and rows-1 are the coordinate limits. M = cv.getRotationMatrix2D(((cols-1)/2.0,(rows-1)/2.0),90,1) dst = cv.warpAffine(img,M,(cols,rows)) 1.3 Perspective Transformation # img = cv.imread(\u0026#39;sudoku.png\u0026#39;) assert img is not None, \u0026#34;file could not be read, check with os.path.exists()\u0026#34; rows,cols,ch = img.shape pts1 = np.float32([[56,65],[368,52],[28,387],[389,390]]) pts2 = np.float32([[0,0],[300,0],[0,300],[300,300]]) M = cv.getPerspectiveTransform(pts1,pts2) dst = cv.warpPerspective(img,M,(300,300)) plt.subplot(121),plt.imshow(img),plt.title(\u0026#39;Input\u0026#39;) plt.subplot(122),plt.imshow(dst),plt.title(\u0026#39;Output\u0026#39;) ","date":"1 July 2023","permalink":"/opencv/transformation/","section":"Opencvs","summary":"Geometric Transformations of Images # 1.","title":"Geometric Transformations of Images"},{"content":" start process the picture # Read in the picture # using the cv2.imread you can get the img type result.\nimport cv2 import numpy as np img = cv2.imread(\u0026#39;test.png\u0026#39;) print(img) assert img is not None, \u0026#34;file could not be read, check with os.path.exists()\u0026#34; The default image type is the rgb\nImage add # $dst = \\beta \\cdot img1 + \\alpha\\cdot img2$\n将不同的图片按照不同的比例进行叠加，得到最终的图片\nimport cv2 as cv import numpy as np img1 = cv.imread(\u0026#39;test.png\u0026#39;) img2 = cv.imread(\u0026#39;test1.png\u0026#39;) assert img1 is not None, \u0026#34;file could not be read, check with os.path.exists()\u0026#34; assert img2 is not None, \u0026#34;file could not be read, check with os.path.exists()\u0026#34; dst = cv.addWeighted(img1, 0.7, img2, 0.3, 0) cv.imshow(\u0026#39;dst\u0026#39;, dst) cv.waitKey(0) cv.destroyAllWindows() ","date":"1 July 2023","permalink":"/opencv/imgstart/","section":"Opencvs","summary":"start process the picture # Read in the picture # using the cv2.","title":"Simple image process"},{"content":" Opencv environment configuration # Host information # raspberry zerow with office camera.\nTo enable the camera in the raspberry os, running the raspi-conifg command to turn on the camera.\nInstall the package # sudo apt-get install build-essential cmake pkg-config libjpeg-dev libtiff5-dev libjasper-dev libpng-dev libavcodec-dev libavformat-dev libswscale-dev libv4l-dev libxvidcore-dev libx264-dev libfontconfig1-dev libcairo2-dev libgdk-pixbuf2.0-dev libpango1.0-dev libgtk2.0-dev libgtk-3-dev libatlas-base-dev gfortran libhdf5-dev libhdf5-serial-dev libhdf5-103 python3-pyqt5 python3-dev -y pip3 install opencv-python It will takes a long time .\n","date":"1 July 2023","permalink":"/opencv/getstart/","section":"Opencvs","summary":"Opencv environment configuration # Host information # raspberry zerow with office camera.","title":"Opencv GetStart"},{"content":"My name is jiajunCheng\nA student from HuaZhong university of computer and science\nI use linux, chisel and golang in my life.\n","date":"29 June 2023","permalink":"/about/","section":"My star","summary":"My name is jiajunCheng","title":"About"},{"content":" The first # ","date":"29 June 2023","permalink":"/posts/my-first-post/","section":"Posts","summary":" The first # ","title":"My First Post"},{"content":"","date":"29 June 2023","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":" Deconstructing Commit # link to the paper pdf\n1. Summary # This paper introduce the OoO commit in the cpu, which is less concerned than the OoO execution and branch prediction.\n2. position of the commit # Commit is usually is last stage of the cpu. In the commit stage the resources allocated by rob, regfile\u0026hellip; will be freed.\n3. Why commit in order? # Commit inorder can avoid many problems like waw conflict or commit the misprediction instructions.\n4. The condition for the OoO commit # 4.1 Finished the execution # Before commit the instructions, it should complete it access to all of the function units.\n4.2 WAR Hazard # A store instruction can not be commit until the load to the target register is already committed.\n4.3 on the right branch # The instruction can not be commit when it knows it is on the right branch\n4.4 there is no older instruction may raise exception # when there is no older instruction will raise exception, it can commit safely.\n4.5 Replay Traps # For a memory operation to commit early it must be known that an instruction is free from store-load and load-load replay traps.\n","date":"1 January 0001","permalink":"/arch/paper/commit/","section":"Arches","summary":"Deconstructing Commit # link to the paper pdf","title":""},{"content":" Opencv colorspace change # 1. basic color model # RGB: using the (red, green, blue) to describe the color, uses 8 bits each.\nHSV: using the Hue, Saturation, and values to describe the color.\n2. Color-Space # There are many colorspaces, using the code blow to get these flags.\nimport cv2 as cv flags = [i for i in dir(cv) if i.startswith(\u0026#39;COLOR_\u0026#39;)] print(flags) 3. Object Tracking # We can change the rgb image to hsv image an extract a colored object from.\n","date":"1 January 0001","permalink":"/opencv/colorchange/","section":"Opencvs","summary":"Opencv colorspace change # 1.","title":""},{"content":" Image Filtering # 2D Convolution # 图像通常会被不同类型的滤波函数所处理，通常而言有两种\nlow pass filter: used to filter the image noise high pass filter: used to find edges in the image import numpy as np import cv2 as cv from matplotlib import pyplot as plt img = cv.imread(\u0026#39;test.png\u0026#39;) assert img is not None, \u0026#34;file could not be read, check with os.path.exists()\u0026#34; kernel = np.ones((5, 5), np.float32) / 25 dst = cv.filter2D(img, -10, kernel) plt.subplot(121), plt.imshow(img), plt.title(\u0026#39;Original\u0026#39;) plt.xticks([]), plt.yticks([]) plt.subplot(122), plt.imshow(dst), plt.title(\u0026#39;Averaging\u0026#39;) plt.xticks([]), plt.yticks([]) plt.show() Image Bluring # ","date":"1 January 0001","permalink":"/opencv/imagefilter/","section":"Opencvs","summary":"Image Filtering # 2D Convolution # 图像通常会被不同类型的滤波函数所处理，通常而言有两种","title":""},{"content":"","date":"1 January 0001","permalink":"/arch/","section":"Arches","summary":"","title":"Arches"},{"content":"","date":"1 January 0001","permalink":"/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"","date":"1 January 0001","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"1 January 0001","permalink":"/series/","section":"Series","summary":"","title":"Series"},{"content":"","date":"1 January 0001","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"}]